
	git status               	//显示当前工作区的状态，包括各个文件夹的状态

	git remote -v            	//查看本文件夹对应的远程仓库的信息

	git merge origin/master  	//获取远程服务器上主分支的版本，并自动合并，不会改变本地版本库中的已修改的部分

	git checkout readme.txt  	//撤销对readme.txt文件的更改，使其与获取到的时候保持一致

	git rm abc.txt           	//当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用

	git rm --cached abc.txt  	//当我们需要删除暂存区或分支上的文件, 本地没有删除, 只是不希望这个文件被版本控制, 可以使用

	git rm -r 文件夹名       	//删除文件夹及其子目录

	git branch  			//查看所有的本地分支，及其当前处于哪个分支

	git branch -a 			//显示所有的本地分支和远程分支   在不同电脑的本地仓库，执行本命令显示的远程仓库分支是不一样的

	git branch a  		 	//创建本地分支a ,当前分支不变

	git checkout a 		 	//当前分支切换到分支a

	git checkout -b b        	//新建本地分支b，当前分支切换到分支b

	git branch -d a    	 	//删除分支a，若a分支的代码未合并到本地的master分支，则删除失败

	git branch -D a    	 	//强制删除分支a,不管其是否合并到本地的master分支

	git push -u origin master       //如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，

	git clean -f       		//删除 untracked files   会将当前目录下的untracked file文件删除

	git clean -fd      		//删除 untracked 目录

	git clean -xfd     		//连gitignore 的untracked de untrack 文件/目录也一起删掉（慎用）
	
	git reset [--hard|soft|mixed|merge|keep] [<commit>或HEAD]     :将当前的分支重设（reset）到指定的<commit>或者HEAD（默认，如果不显示指定commit，默认是HEAD，即最新的一次提交）
								  其中：  
								  commit：可以使用git log 查询commit名
								  hard:重设working directory、index、head指向  soft:只改head指向   mixed<缺省>:仅改 index   merge:用得不多   keep:用得不多

   								  使用git log 和 git reset 恢复之前的版本，  //在master分支上
								  ①、git log        //查看每次commit的版本号，然后鼠标右键复制想恢复的版本号
								  ②、git reset --hard  版本号/head~n    //文件夹、缓冲区、本地仓库全都恢复到这个版本号对应的状态  ，若使用head~n，代表回退n个版本。 当前版本为回退0个版本



